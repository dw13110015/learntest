<?xml version="1.0" encoding="UTF-8"?>

<project name="toamgw" basedir="." default="ear" xmlns:ivy="antlib:fr.jayasoft.ivy.ant">
	<!-- =================================================================== -->
	<!-- 变量设置 -->
	<!-- =================================================================== -->
	<property environment="env"/>
	<property name="project.root" value="${basedir}"/>
	<property name="prop.tmp" value="prop_tmp" />
	<native2ascii src="${project.root}" dest="${prop.tmp}" includes="build.properties" />
	<property file="${prop.tmp}/build.properties"/>
	<delete dir="${prop.tmp}" />


	<!-- 代码目录 -->
	<property name="src.dir" value="${project.root}/src"/>
	<property name="src.java.dir" value="${src.dir}/java"/>
	<property name="src.test.dir" value="${src.dir}/test" />
	<!-- 存放单元测试的配置文件 -->
	<property name="src.test.config.dir" value="${src.test.dir}/config" />
	<!-- 存放单元测试的测试数据 -->
	<property name="src.test.data.dir" value="${src.test.dir}/data" />
	<property name="src.jsp.dir" value="${src.dir}/webroot"/>
	<property name="src.config.dir" value="${src.dir}/java"/>

	<!-- 临时编译目录 -->
	<property name="build.dir" value="${project.root}/build" />
	<property name="build.lib.dir" value="${project.root}/src/webroot/WEB-INF/lib"/>
	<property name="build.classes.dir" value="${build.dir}/classes" />
	<property name="build.test.dir" value="${build.dir}/test" />
	<!-- 单元测试结果和代码覆盖率报告存放目录 -->
	<property name="build.coverage.dir" value="${build.dir}/coverage" />
	<property name="build.doc.junit.dir" value="${project.root}/doc/junit" />
	<property name="build.doc.coverage.dir" value="${project.root}/doc/coverage" />

	<!-- Java编译CLASSPATH -->
	<path id="master-classpath">
		<fileset dir="${build.lib.dir}"/>
		<fileset file="${tomcat.lib}\*.jar"/>
	</path>
	<!-- 检查工具是否安装 
	<available classname="fr.jayasoft.ivy.Ivy" property="ivy.present"/>
	<fail unless="ivy.present" message="第三方包依赖工具没有安装,请把ivy-1.4.jar,ivy-core-1.4.jar拷贝到${env.ANT_HOME}/lib" />

	<available classname="net.sf.antcontrib.AntContribVersion" property="antcontrib.present"/>
	<fail unless="antcontrib.present" message="ANT扩展工具AntContrib没有安装,请把ant-contrib.jar拷贝到${env.ANT_HOME}/lib" />
	-->
	
	<!-- Configure the custom Ant tasks for the Manager application -->
	<!-- emma代码覆盖工具 -->
	<path id="emma.path">
		<pathelement location="${env.ANT_HOME}/lib/emma.jar" />
		<pathelement location="${env.ANT_HOME}/lib/emma_ant.jar" />
	</path>
	<taskdef resource="emma_ant.properties" classpathref="emma.path" />



	<!-- =================================================================== -->
	<!-- 编译JAVA文件 -->
	<!-- =================================================================== -->
	<target name="compile" description="编译Java文件" depends="init,info">
		<available classname="com.paic.pafa.app.lwc.core.context.support.PafaCoreContexton" classpathref="master-classpath" property="lib.present"/>
		<fail unless="lib.present" message="第三方包还没有下载,请配置ivy.xml文件,并执行get-lib任务,您使用的JBOSS平台,请指定下载PAFA3.2版本,以前版本不支持JBoss" />
		<javac destdir="${build.classes.dir}" target="1.6" debug="true"
            deprecation="false" optimize="false" failonerror="true">
			<compilerarg line="-encoding UTF-8"/>
			<src path="${src.java.dir}"/>
			<classpath refid="master-classpath"/>
		</javac>
		
		<!--编译测试代码 -->
		<javac destdir="${build.test.dir}" debug="on" deprecation="false" failonerror="true">
			<compilerarg line="-encoding UTF-8"/>
			<src path="${src.test.dir}" />
			<classpath refid="master-classpath" />
			<classpath location="${build.classes.dir}" />
		</javac>
		
		<!-- 测试中可能会用到的peroperties文件拷贝到测试类文件 -->
		<copy todir="${build.test.dir}" >
			<fileset dir="${src.test.dir}" includes="**/*.properties"/>
			<fileset dir="${src.test.dir}" includes="*.xml"/>
			<fileset dir="${src.test.dir}" includes="config/**/**"/>
			<fileset dir="${src.test.dir}" includes="data/**/**"/>
		</copy>
		
		<!-- 测试中会用到 ResSwitch.properties、context-toamgw.properties、mamc_sso_client.properties，将其拷贝到测试类文件中-->
		<copy todir="${build.test.dir}">
			<fileset dir="${src.java.dir}">
				<include name="ResSwitch.properties"/>
				<include name="context-toamgw.properties"/>
				<include name="mamc_sso_client.properties"/>
			</fileset>
		</copy>
	</target>

	<!-- =================================================================== -->
	<!-- 发布供其他项目使用的内部第三方包 -->
	<!-- =================================================================== -->
	<target name="jar" description="构建给其他项目使用的jar文件,用户根据需要修改该任务" depends="compile">
		<echo message="${project.name}没有需要发布给其他项目使用的公共jar文件"/>
		<jar jarfile="${publish.libs.dir}/keyutil.jar" basedir="${build.classes.dir}"
				  includes="org\apache\tomcat\dbcp\util\**">

			<manifest>
				<attribute name="Built-By" value="${user.name}"/>
				<section name="nameutil">
					<attribute name="Specification-Version" value="${project.revision}"/>
					<attribute name="Specification-Vendor" value="${specification.vendor}"/>
					<attribute name="Implementation-Version" value="${project.revision} ${TODAY}"/>
					<attribute name="Implementation-Vendor" value="${implementation.vendor}"/>
				</section>
			</manifest>
		</jar>
	</target>

	<!-- =================================================================== -->
	<!-- 创建展开目录形式的EAR应用 -->
	<!-- =================================================================== -->
	<target name="info" description="显示项目构建信息">
		<echo level="info">
		     +-------------------------您正在构建的项目信息-----------------------------+
		     +--------------------------------------------------------------------------+
		      项目名称|${project.name}
		      项目描述!${project.discription}
		      项目版本|${project.revision}
		      项目联系人|${project.contact}
		     +--------------------------------------------------------------------------+
		     </echo>
	</target>

	<!-- =================================================================== -->
	<!-- 初始化，创建目录 -->
	<!-- =================================================================== -->
	<target name="init" description="创建目录" depends="info" >
		<mkdir dir="${build.classes.dir}" />
		<mkdir dir="${build.lib.dir}" />
		<mkdir dir="${build.test.dir}" />
		<mkdir dir="${rel.dir}" />
		<mkdir dir="${publish.apps.dir}" />
		<mkdir dir="${publish.libs.dir}" />
	</target>

	<!-- =================================================================== -->
	<!-- 清空所有输出文件包括build和部署目录 -->
	<!-- =================================================================== -->
	<target name="clean" description="清空所有输出文件包括build和部署目录">
		<property name="build.classes.dir" value="${build.dir}/classes" />
		<property name="build.test.dir" value="${build.dir}/test" />
		<delete dir="${build.classes.dir}"/>
		<delete dir="${build.test.dir}"/>
		<delete dir="${deploy.exploded.dir}"/>
		<delete dir="${rel.dir}"/>
		<delete file="${deploy.ear.dir}/${project.name}.ear"/>
	</target>

	<!-- =================================================================== -->
	<!-- 清空第三方包本地缓存 -->
	<!-- =================================================================== -->
	<target name="clean-lib-cache" description="清空第三方包本地缓存">
		<delete dir="${build.lib.dir}/"/>
	</target>

	<!-- =================================================================== -->
	<!-- 设置第三方包下载配置文件 -->
	<!-- =================================================================== -->
	<target name="configure-lib" description="设置第三方包配置文件">
		<ivy:configure url="${ivy.config.url}" />
	</target>

	<!-- =================================================================== -->
	<!-- 下载或从本地缓存获取第三方包 -->
	<!-- =================================================================== -->
	<target name="get-lib" depends="init,clean-lib-cache,configure-lib" description="下载或从本地缓存获取第三方包">
		<ivy:retrieve pattern="${build.lib.dir}/[artifact].[ext]" />
	</target>

	<!-- =================================================================== -->
	<!-- 创建用于发布的EAR包文件 -->
	<!-- =================================================================== -->
	<target name="ear" depends="clean,exploded-ear,unitTest" description="创建用于发布的EAR包文件">

		<jar jarfile="${deploy.ear.dir}/toa-mgw.war"
            basedir="${deploy.exploded.dir}/${project.name}.war">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Specification-Version" value="${build.version}"/>
			</manifest>
		</jar>

		<!-- 提取properties文件，它们需要单独配置到CLASSPATH -->
		<copy file="${src.config.dir}/context-${project.name}.properties"
            todir="${deploy.ear.dir}"/>
		<copy file="${src.config.dir}/log4j.properties"
    	            todir="${deploy.ear.dir}"/>
		<copy file="${src.config.dir}/devlog.properties"
    	            todir="${deploy.ear.dir}"/>


		<echo level="info" message="删除临时生成的目录"/>
		<!--<delete dir="${deploy.exploded.dir}" />-->
		<copy todir="${publish.apps.dir}">
			<fileset dir="${deploy.ear.dir}" >
				<include name="*.war"/>
			</fileset>
		</copy>
		<copy todir="${rel.dir}">
			<fileset dir="${publish.libs.dir}" >
				<include name="*.jar"/>
			</fileset>
		</copy>
		<echo level="info" message="打包版本目录"/>
		<copy todir="${rel.dir}">
			<fileset dir="${deploy.ear.dir}">
				<include name="*.war"/>
			</fileset>
		</copy>
		<echo level="info" message="删除版本目录"/>
		<delete dir="${publish.apps.dir}" />
	</target>

	<!-- =================================================================== -->
	<!-- 创建展开目录形式的EAR应用 -->
	<!-- =================================================================== -->
	<target name="exploded-ear" depends="compile" description="创建展开目录形式的EAR应用(开发模式)">

		<mkdir dir="${deploy.exploded.dir}/${project.name}.war/WEB-INF/lib"/>
		<mkdir dir="${deploy.exploded.dir}/${project.name}.war/WEB-INF/classes"/>
		<!-- 创建WAR的内容 -->

		<copy todir="${deploy.exploded.dir}/${project.name}.war/WEB-INF/classes">
			<fileset dir="${build.classes.dir}/">
			</fileset>
			<fileset dir="${src.dir}/config/core">
				<include name="*.p7b"/>
				<include name="*.jks"/>
				<include name="*.cer"/>
			</fileset>
			<fileset dir="${src.config.dir}">
				<exclude name="amesb*.properties"/>
				<exclude name="context-*.properties"/>
				<exclude name="mamc_*.properties"/>
				<exclude name="log4j.properties"/>
			</fileset>
		</copy>
		
		<copy todir="${deploy.exploded.dir}/${project.name}.war/WEB-INF/lib"
            preservelastmodified="true">
			<fileset dir="${build.lib.dir}">
				<!-- 单元测试用的包不必打在ear里面 -->
				<exclude name="toa-mgw.jar"/>
				<exclude name="easymock.jar"/>
			</fileset>
			<fileset dir="${tomcat.lib}">
			</fileset>
		</copy>

		<copy todir="${deploy.exploded.dir}/${project.name}.war">
			<fileset dir="${src.jsp.dir}/"/>
		</copy>
	</target>
	<target name="deploy"  description="创建并部署目录结构的EAR应用">
		<copy todir="${tomcat.websapp.dir}">
			<fileset dir="${deploy.ear.dir}">
				<include name="toa-mgw.war"/>
			</fileset>
		</copy>
	</target>

	<target name="redeploy" depends="exploded-ear" description="重新生成并部署应用">
		<copy todir="${tomcat.websapp.dir}/toa-mgw">
			<fileset dir="${deploy.exploded.dir}/${project.name}.war/">
			</fileset>
		</copy>
	</target>

	<target name="test_init">
		<mkdir dir="${build.doc.junit.dir}" />
		<mkdir dir="${build.coverage.dir}" />
		<mkdir dir="${build.doc.coverage.dir}" />
		<mkdir dir="${build.doc.junit.dir}" />
	</target>

	<!-- 将应用的class文件做为测试覆盖做预处理 -->
	<target name="emma_precess" description="将应用的class文件做为测试覆盖做预处理" depends="compile,test_init">
		<!-- 定义编译后应用类的path变量 -->
		<path id="build.classes.path">
			<pathelement location="${build.classes.dir}" />
		</path>
		<emma enabled="true">
			<instr instrpathref="build.classes.path" destdir="${build.coverage.dir}" metadatafile="${build.coverage.dir}/metadata.emma" merge="true">
				<filter excludes="*Test*" />
			</instr>
		</emma>
	</target>

	<!--junit 测试一定要设置fort=true, 因为emma只有在jvm退出时,才会写输出覆盖文件 -->
	<target name="unitTest" description="单元测试,并生成报表" depends="clean,compile,test_init">
		<junit printsummary="true" fork="true">
			<classpath>
				<!--为junit指定测试类的路径,emma处理后的类路径要放在未处理的类路径前 -->
				<pathelement location="${build.test.dir}" />
				<pathelement location="${build.coverage.dir}" />
				<pathelement location="${build.classes.dir}" />
				<fileset file="${env.JAVA_HOME}/lib/tools.jar" />
				<fileset dir="${build.lib.dir}" />
				<fileset file="${weblogic.jar}" />
			</classpath>
			<!-- 为junit的jvm指定参数，将覆盖结果文件放到指定目录 -->
			<jvmarg value="-Dpafa.log.home=${pafaloghome}" />

			<!--执行单元测试 -->
			<formatter type="xml" usefile="true" />
			<batchtest todir="${build.doc.junit.dir}">
				<fileset dir="${src.test.dir}">
					<include name="**/SuitTest.java" />
				</fileset>
			</batchtest>
		</junit>

		<!-- 产生单元测试报表文档 -->
		<junitreport todir="${build.doc.junit.dir}">
			<fileset dir="${build.doc.junit.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${build.doc.junit.dir}" />
		</junitreport>
	</target>

	<!-- =================================================================== -->
	<!-- 帮助信息 -->
	<!-- =================================================================== -->
	<target name="usage">
		<echo message="Pafa Application Build File"/>
		<echo message="用法：ant -[target]"/>
		<echo message="------------------------------------------------------"/>
		<echo message="[target]"/>
		<echo message="clean        --> 清空所有输出文件包括build和部署目录"/>
		<echo message="compile      --> 编译Java文件"/>
		<echo message="ear          --> 创建用于发布的EAR包文件（配置文件已提出）"/>
		<echo message="exploded-ear --> 创建展开目录形式的EAR应用(开发模式)"/>
		<echo message="------------------------------------------------------"/>
	</target>

	<!-- =================================================================== -->
	<!-- 主构建任务, 省却情况调用ear任务,开发人员可以在depends后添加依赖任务
    			这个任务主要用来实现编译,打包功能, 执行完后,可以生成应用的EAR,以及要发布
    			给其他项目使用的JAR-->
	<!-- =================================================================== -->
	<target name="main" depends="clean,get-lib,jar,ear">
		<echo message="${project.name}项目构建完成"/>
	</target>

</project>